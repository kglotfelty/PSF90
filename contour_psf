#!/usr/bin/env python

import os
import numpy as np
from pycrates import read_file
from ciao_contrib.runtool import make_tool


def sim_psf(infile, outroot, ra, dec, energy, flux):
    'Simulate the PSF with MARX'

    sim = make_tool("simulate_psf")
    sim.infile = infile
    sim.outroot = outroot
    sim.ra = ra
    sim.dec = dec
    sim.spectrum = ""
    sim.monoenergy = energy
    sim.flux = flux
    sim.minsize = 256
    sim()

    if not os.path.exists( f"{outroot}.psf" ):
        raise RuntimeError("Whoops")
    psf = f"{outroot}.psf"

    return psf


def get_coords(infile, ra, dec):
    'Convert RA/Dec to chandra coordinates'

    from ciao_contrib._tools.fileio import get_keys_from_file
    from coords.chandra import cel_to_chandra

    keys = get_keys_from_file(infile)
    coords = cel_to_chandra(keys,ra,dec)
    return coords


def smooth_psf(psf, theta, outroot):
    'Smooth the PSF'

    # From AE:
    # radius50 = (0.85 -0.25 *off_angle + 0.10 *off_angle^2) * arcsec_per_skypixel  ; arcsec
    # arcsec_per_sigma    = 0.1 * (radius50 / 0.85)
    # PSFpixel_per_sigma  = arcsec_per_sigma / arcsec_per_PSFpixel ; PSF pixel


    radius50 = (0.85 -0.25 *theta + 0.10 *theta**2) * 0.492
    arcsec_per_sigma = 0.1 * (radius50 / 0.85)
    psfpixel_per_sigma = arcsec_per_sigma / 0.492

    conv = make_tool("aconvolve")
    conv.infile = psf
    conv.outfile = f"{outroot}.smpsf"
    conv.kernelspec = f"lib:gaus(2,5,5,{psfpixel_per_sigma},{psfpixel_per_sigma})"
    conv(method="slide", edge="const", const=0, clobber=True)

    smpsf = conv.outfile

    return smpsf


def make_contour(smpsf, frac, tol, outroot):
    'Create contour to enclose fraction of PSF'

    pixels = read_file(smpsf).get_image().values
    flat = pixels.flatten()
    pixels_sorted = np.sort(flat)

    cumulative = np.cumsum(pixels_sorted)
    cumulative /= cumulative[-1]
    idx = np.argwhere(cumulative>=(1-frac))[0]

    contour = make_tool("dmcontour")
    stat = make_tool("dmstat")

    contour.infile = smpsf
    contour.outfile = f"{outroot}.contr"
    stat.infile = f"{smpsf}[sky=region({contour.outfile})]"

    psffrac = 0
    numiter = 0
    while (( psffrac < frac - tol ) | ( psffrac > frac + tol )):
        numiter += 1

        contour.levels = float(pixels_sorted[idx])
        contour(clobber=True)

        stat(centroid=False, sigma=False, median=False)
        psffrac = float(stat.out_sum)

        if numiter > 20:
            print("Too many iterations, go with what we've got")
            break

        if psffrac < frac:
            idx -= 1
            if idx < 0:
                print("Fraction is too low")
                break
        elif psffrac > frac:
            idx += 1
            if idx >= len(pixels_sorted):
                print("Fraction is too high")
                break

    return contour.outfile


def make_ellipse(smpsf, frac, tol, coords, outroot):
    'Find ellipse fixed at input location'

    ellipse = make_tool("dmellipse")
    ellipse.infile = smpsf
    ellipse.outfile = f"{outroot}.ellps"
    ellipse.fraction = frac
    ellipse.fix_centroid = True
    ellipse.x_centroid = coords['x'][0]
    ellipse.y_centroid = coords['y'][0]
    ellipse.tolerance = tol
    ellipse(clobber=True)
    
    return ellipse.outfile


def make_circle(infile, ra, dec, energy, frac, outroot):
    'Make circle used by srcflux'

    psfsrc = make_tool("psfsize_srcs")

    psfsrc.infile = infile
    psfsrc.pos = f"{ra},{dec}"
    psfsrc.outfile = f"{outroot}.crcl"
    psfsrc.energy = energy
    psfsrc.ecf = frac
    psfsrc(clobber=True)

    return psfsrc.outfile

def get_cli():
    import argparse

    def between(lo, hi):
        'only allow values 0 to 1'
        def check_range(value):
            val = float(value)
            if val < lo or val > hi:
                raise argparse.ArgumentTypeError(f"Invaild value '{value}', must be between {lo} and {hi}")
            return val

        return check_range

    parser = argparse.ArgumentParser()
    parser.add_argument("infile", help="Input event file name",
                        type=str)
    parser.add_argument("outroot", help="Output directory+filename root",
                        type=str)
    parser.add_argument("ra", help="Right Ascension (decimal degrees)",
                        type=between(0,360))
    parser.add_argument("dec", help="Declination (decimal degrees)",
                        type=between(-90,90))
    parser.add_argument("-e", "--energy", help="Monochromatic energy to simulate (keV)",
                        default=1.0, type=between(0.1,10))
    parser.add_argument("-f", "--fraction", help="ECF Fraction to create",
                        default=0.9, type=between(0,1))
    parser.add_argument("-t", "--tolerance", help="Tolerance on ECF fraction",
                        default=0.001, type=between(0,1))
    parser.add_argument("-x", "--flux", help="Photon flux for PSF",
                       default=0.01, type=between(0.0000001,0.1))
    params = parser.parse_args()
    return params


def main():

    params = get_cli()

    psf = sim_psf(params.infile, params.outroot, params.ra, params.dec,
                  params.energy, params.flux)
    coords = get_coords(params.infile, params.ra, params.dec)
    smpsf = smooth_psf(psf, coords["theta"][0], params.outroot)
    contr = make_contour(smpsf, params.fraction, params.tolerance,
                         params.outroot)
    ellps = make_ellipse(smpsf, params.fraction, params.tolerance,
                         coords, params.outroot)
    crcl = make_circle(params.infile, params.ra, params.dec,
                       params.energy, params.fraction, params.outroot)

    print("\nOutput files")
    print(f"\t{contr}\t : Contour Region")
    print(f"\t{ellps}\t : Ellipse Region")
    print(f"\t{crcl} \t : Circle Region")
    print()
    print(f"ds9 {smpsf} -region color green -region {contr} \\")
    print(f"            -region color magenta -region {ellps} \\")
    print(f"            -region color yellow -region {crcl}")


if __name__ == '__main__':
    main()



